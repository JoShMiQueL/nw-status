name: Build and Publish Release

on:
  release:
    types: [published]

permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract version from release
        id: version
        run: |
          $VERSION = "${{ github.event.release.tag_name }}" -replace '^nw-status-v', ''
          echo "VERSION=$VERSION" >> $env:GITHUB_ENV
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build executable
        run: bun build src/index.ts --compile --outfile dist/nw-monitor.exe

      - name: Copy config files
        run: bun scripts/copy-build-files.ts

      - name: Create release package
        run: |
          cd dist
          Compress-Archive -Path * -DestinationPath ../nw-monitor-windows-x64-${{ env.VERSION }}.zip
        shell: pwsh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-executable
          path: nw-monitor-windows-x64-${{ env.VERSION }}.zip
          retention-days: 1

  build-docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract version from release
        id: version
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#nw-status-v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        continue-on-error: true
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ env.VERSION }}
            type=semver,pattern={{major}}.{{minor}},value=${{ env.VERSION }}
            type=semver,pattern={{major}},value=${{ env.VERSION }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update Docker Hub description
        continue-on-error: true
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ secrets.DOCKERHUB_USERNAME }}/nw-status
          short-description: "New World Server Status Monitor with Telegram notifications"
          readme-filepath: ./DOCKER.md

  attach-to-release:
    name: Attach Artifacts to Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-docker]
    
    steps:
      - name: Extract version from release
        id: version
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#nw-status-v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-executable

      - name: Attach artifacts to existing release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          name: NW Status v${{ env.VERSION }}
          files: |
            nw-monitor-windows-x64-${{ env.VERSION }}.zip
